@* The root page of this section is passed in as the model *@

@inherits StatiqRazorPage<IDocument>
<div class="sidebar-root">
    @{
        if (OutputPages.GetChildrenOf(Model).Any(x => x.ContainsKey("Tags")))
        {
        <h4 class="header"><i class="fa fa-bookmark"></i> Categories</h4>
            var tagViews = OutputPages.GetChildrenOf(Model)
            .Where(x => x.GetBool(SiteKeys.ShowInSidebar, true) && !x.ContainsKey(Keys.RedirectTo) && x.ContainsKey("Tags"))
            .DistinctBy(x => x.GetString("Tags"))
            .OrderBy(x => x.GetString("Tags"));

            foreach (IDocument doc in tagViews)
            {
                var tags = doc.GetString("Tags");
                var linkText = tags.Replace(" ", "-").Replace("'", string.Empty);
                var currentTags = tagViews.Where(x => x.GetString("Tags").Contains(tags));
        <div class="sidebar-nav-item @(Document.IdEquals(doc) ? "active" : null)">
                    @*Html.DocumentLink(
        doc,
        linkText,
        doc.GetString(linkText, doc.GetTitle()),
        new Dictionary<object, object> { { "class", (Document.IdEquals(doc) ? "active" : null) } })*@
            <a class="@(Document.IdEquals(doc) ? "active" : null)" href="@Context.GetLink($"/posts/Categories?category={linkText}")">@linkText</a>
        </div>
            }
        }

        <h4 class="header"><i class="fa fa-calendar"></i> Archive</h4>
        var publishedViews = OutputPages.GetChildrenOf(Model)
        .Where(x => x.GetBool(SiteKeys.ShowInSidebar, true) && !x.ContainsKey(Keys.RedirectTo) && x.ContainsKey(WebKeys.Published))
        .DistinctBy(x =>
        {
            var d = x.GetDateTime(WebKeys.Published);
            return new DateTime(d.Year, d.Month, 1);
        })
        .OrderByDescending(x =>
        {
            var d = x.GetDateTime(WebKeys.Published);
            return new DateTime(d.Year, d.Month, 1);
        });
        foreach (var doc in publishedViews)
        {
            var linkText = doc.GetDateTime(WebKeys.Published).ToString("MMMM,yyyy");
            var currentPublished = publishedViews.Where(x => x.GetDateTime(WebKeys.Published).ToString("MMMM,yyyy").Contains(linkText));
        <div class="sidebar-nav-item @(Document.IdEquals(doc) ? "active" : null)">
            <a class="@(Document.IdEquals(doc) ? "active" : null)" href="@Context.GetLink($"/posts/Archive?archive={linkText}")">@linkText</a>
        </div>
        }

        if (OutputPages.GetChildrenOf(Model).Any(x => x.ContainsKey("Author")))
        {
        <h4 class="header"><i class="fa fa-user"></i> Authors</h4>
            var authorViews = OutputPages.GetChildrenOf(Model)
            .Where(x => x.GetBool(SiteKeys.ShowInSidebar, true) && !x.ContainsKey(Keys.RedirectTo) && x.ContainsKey("Author"));

            foreach (var doc in authorViews
            .DistinctBy(x => x.GetString("Author"))
            .OrderBy(x => x.GetString("Author")))
            {
                var author = doc.GetString("Author");
                var linkText = author.Replace(" ", "-").Replace("'", string.Empty);
                var currentAuthor = authorViews.Where(x => x.GetString("Author").Contains(author));
        <div class="sidebar-nav-item @(Document.IdEquals(doc) ? "active" : null)">
            <a class="@(Document.IdEquals(doc) ? "active" : null)" href="@Context.GetLink($"/posts/Authors?author={linkText}")">@linkText</a>
        </div>
            }
        }
    }
</div>
